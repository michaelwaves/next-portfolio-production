/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 -t cloudbreak.glb 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useAppDispatch } from '@/redux/hooks'
import { toggleState } from '@/redux/deskSlice'

export type GLTFResult = GLTF & {
  nodes: {
    Cylinder034: THREE.Mesh
    Cylinder034_1: THREE.Mesh
    Cylinder034_2: THREE.Mesh
  }
  materials: {
    paper: THREE.MeshStandardMaterial
    plastic: THREE.MeshStandardMaterial
    ['translucent-plastic']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Cloudbreak(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/cloudbreak.glb') as GLTFResult
  const dispatch = useAppDispatch()
  const plastic = new THREE.MeshStandardMaterial({ color: 0xFFFFFF, opacity: 0.5 })
  return (
    <group {...props} dispose={null} name="cloudbreak"
      onClick={(e) => { e.stopPropagation(); dispatch(toggleState('cloudbreak')) }}
    >
      <group position={[-0.006, 0, 0]}>
        <group position={[0.51, 0, 0]}>
          <mesh geometry={nodes.Cylinder034.geometry} material={materials.paper} />
          <mesh geometry={nodes.Cylinder034_1.geometry} material={plastic} />
          <mesh geometry={nodes.Cylinder034_2.geometry} material={materials['translucent-plastic']} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/cloudbreak.glb')
