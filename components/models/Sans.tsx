/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t sans.glb
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { useAppDispatch } from '@/redux/hooks'
import { toggleState } from '@/redux/closetSlice'

type GLTFResult = GLTF & {
  nodes: {
    eye_left: THREE.Mesh
    eye_left001: THREE.Mesh
    sans_slipper: THREE.Mesh
    sans_slipper001: THREE.Mesh
    Cube069: THREE.SkinnedMesh
    Cube069_1: THREE.SkinnedMesh
    Cube069_2: THREE.SkinnedMesh
    Cube066: THREE.SkinnedMesh
    Cube066_1: THREE.SkinnedMesh
    root: THREE.Bone
  }
  materials: {
    ['gray.006']: THREE.MeshStandardMaterial
    ['sans_eye.001']: THREE.MeshStandardMaterial
    red: THREE.MeshStandardMaterial
    ['blue.004']: THREE.MeshStandardMaterial
    gray: THREE.MeshStandardMaterial
    ['gray.005']: THREE.MeshStandardMaterial
    sans: THREE.MeshStandardMaterial
  }
}

type ActionName = 'idle_sans'

export function Sans(props: JSX.IntrinsicElements['group']) {
  const dispatch = useAppDispatch()
  const group = useRef<any>()
  const rotateRef = useRef<any>()
  const { nodes, materials, animations } = useGLTF('/sans.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)

  /*   useFrame(({ camera }) => {
      if (rotateRef.current) {
        const targetPosition = camera.position.clone();
        const meshPosition = rotateRef.current.position.clone();
        targetPosition.y = meshPosition.z; // Lock rotation along the Y-axis to the camera's Y position
        rotateRef.current.lookAt(camera.position);
      }
    }); */

    const handleClick = (e:any)=>{
      e.stopPropagation()
      dispatch(toggleState('sansChat'))
    }

  useEffect(() => {
    actions['idle_sans']?.play()
  }, [actions])
  return (
    <group ref={group} {...props} dispose={null} onClick={(e)=>handleClick(e)}>
      <group name="Scene" >
        <group name="Armature" position={[-3.62, 0.91, -0.12]} scale={0.43}>
          <group name="Bone" position={[0, 0.02, 0.04]}>
            <group name="Bone001" position={[0, 1, 0]} rotation={[0.08, 0, 0]}>
              <group name="Bone002" position={[0, 0.79, 0]} rotation={[-0.08, 0, 0]} />
            </group>
          </group>
        </group>

        <group name="sans_rig" ref={rotateRef} position={[-3.6, 0.91, -0.11]} scale={0.39} >
          <group /* rotation={[0, -Math.PI / 2, 0]} */>
            <group name="sans_eye" position={[0.49, 2.75, 0.45]} rotation={[0, 1.4, 0]} scale={0.71}>
              <pointLight name="sans_eye_Orientation" intensity={0.271} decay={2} color="#ffc542" rotation={[-Math.PI / 2, 0, 0]} />
            </group>
            <primitive object={nodes.root} />
            <mesh name="eye_left" geometry={nodes.eye_left.geometry} material={materials['gray.006']} position={[0.31, 2.76, 0.41]} rotation={[0, 1.4, 0]} scale={0.1} />
            <mesh name="eye_left001" geometry={nodes.eye_left001.geometry} material={materials['sans_eye.001']} position={[0.42, 2.76, -0.26]} rotation={[0, 1.4, 0]} scale={0.23}>
              <group name="sans_eye001" position={[-0.03, -0.05, 0.8]} scale={3.03}>
                <pointLight name="sans_eye001_Orientation" intensity={5} decay={2} color="#0047ff" rotation={[-Math.PI / 2, 0, 0]} />
              </group>
            </mesh>
            <mesh name="sans_slipper" geometry={nodes.sans_slipper.geometry} material={materials.red} position={[0.48, 0.02, -0.47]} rotation={[-Math.PI, 1.28, -Math.PI]} scale={[0.22, 0.06, 0.54]} />
            <mesh name="sans_slipper001" geometry={nodes.sans_slipper001.geometry} material={materials.red} position={[0.3, 0.02, 0.6]} rotation={[0, 1.08, 0]} scale={[0.22, 0.06, 0.54]} />
            <group name="sans" >
              <skinnedMesh name="Cube069" geometry={nodes.Cube069.geometry} material={materials['blue.004']} skeleton={nodes.Cube069.skeleton} />
              <skinnedMesh name="Cube069_1" geometry={nodes.Cube069_1.geometry} material={materials.gray} skeleton={nodes.Cube069_1.skeleton} />
              <skinnedMesh name="Cube069_2" geometry={nodes.Cube069_2.geometry} material={materials['gray.005']} skeleton={nodes.Cube069_2.skeleton} />
            </group>
            <group name="sans_head" >
              <skinnedMesh name="Cube066" geometry={nodes.Cube066.geometry} material={materials.gray} skeleton={nodes.Cube066.skeleton} />
              <skinnedMesh name="Cube066_1" geometry={nodes.Cube066_1.geometry} material={materials.sans} skeleton={nodes.Cube066_1.skeleton} />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/sans.glb')
