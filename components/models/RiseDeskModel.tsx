/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t risedesk.glb
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    desk_legs001: THREE.Mesh
    Cube085: THREE.Mesh
    Cube085_1: THREE.Mesh
    Cube085_2: THREE.Mesh
  }
  materials: {
    ['gray.001']: THREE.MeshStandardMaterial
    ['gray.004']: THREE.MeshStandardMaterial
    desk_screen: THREE.MeshStandardMaterial
  }
}

type ActionName = 'riseDeskTopIdle' | 'riseDeskIdle'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function Desk(props: any) {
  const group = useRef<any>()
  const { nodes, materials, animations } = useGLTF('/risedesk.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  const material = new THREE.MeshStandardMaterial({ color: props.color })
  useEffect(() => {
    actions.riseDeskTopIdle?.play()
    actions.riseDeskIdle?.play()
  }
    , [actions])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh name="desk_legs001" geometry={nodes.desk_legs001.geometry} material={materials['gray.001']}>
          <group name="risedesk001">
            <mesh name="Cube085" geometry={nodes.Cube085.geometry} material={material} />
            <mesh name="Cube085_1" geometry={nodes.Cube085_1.geometry} material={materials['gray.004']} />
            <mesh name="Cube085_2" geometry={nodes.Cube085_2.geometry} material={materials.desk_screen} />
          </group>
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/risedesk.glb')
