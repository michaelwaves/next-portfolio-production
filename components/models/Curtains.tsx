/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t curtains.glb
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useSpring, animated } from '@react-spring/three'

type GLTFResult = GLTF & {
  nodes: {
    curtain_r: THREE.Mesh
    curtain_l: THREE.Mesh
  }
  materials: {
    hotel_sheet: THREE.MeshStandardMaterial
  }
}

export function Curtains(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/curtains.glb') as GLTFResult
  const [open, setOpen] = useState(false)
  const { curtain_l, curtain_r } = useSpring({
    curtain_l: open ? 3.5 : 1,
    curtain_r: open ? 3 : 1,
    config: { mass: 1, tension: 400, friction: 20, precision: 0.0001, },
  })
  const handleClick = (e: any) => {
    e.stopPropagation()
    setOpen(!open)
  }
  return (
    <group {...props} dispose={null}>
      <animated.mesh onClick={(e) => handleClick(e)} scale-z={curtain_l} geometry={nodes.curtain_r.geometry} material={materials.hotel_sheet} position={[4.19, 2.76, 3.29]} />
      <animated.mesh onClick={(e) => handleClick(e)} scale-z={curtain_r} geometry={nodes.curtain_l.geometry} material={materials.hotel_sheet} position={[4.31, 2.64, -1.92]} />
    </group>
  )
}

useGLTF.preload('/curtains.glb')
