"use client"

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t room.glb
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useReducer, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTFResult } from './RoomTypes'
import { useSpring, animated } from '@react-spring/three'
import { Curtains } from '../Curtains'
import InsetButton from '@/components/InsetButton'

import { useAppDispatch, useAppSelector } from '@/redux/hooks'
import { toggleState } from '@/redux/closetSlice'
import { toggleState as toggleDesk, toggleStatePopup, getState } from '@/redux/deskSlice'
import { handleLights as reduxLights, toggleState as toggleControls } from '@/redux/controlsSlice'
import { useFrame } from '@react-three/fiber'
import { Cloudbreak } from '../Cloudbreak'



type ActionName = 'idle_float.001' | 'idle_loop' | 'idlea' | 'idleu' | 'unassemble'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

const DISCORD_MATERIAL = new THREE.MeshStandardMaterial({ color: 0x7289da, emissive: 0x7289da, emissiveIntensity: 0.5, metalness: 0.5, roughness: 0.5 })
const BLENDER_BLUE = new THREE.MeshStandardMaterial({ color: 0x80bfff, emissive: 0x80bfff, emissiveIntensity: 0.5, metalness: 0.5, roughness: 0.5 })
const BLENDER_ORANGE = new THREE.MeshStandardMaterial({ color: 0xff8000, emissive: 0xff8000, emissiveIntensity: 0.5, metalness: 0.5, roughness: 0.5 })
const INTENSITY_MULTIPLIER = 0.05
const ROOM_STATE = {
  closet_drawer_l: true,
  closet_drawer_r: true,
  closet_door_l: false,
  closet_door_r: false,
  desk_2: true,
  desk_3: true,
  desk_4: true,
  desk_5: true,
  desk_6: true,
  desk_7: true,
  lamps: 0,
  main_lights: 1,
  point_lights: 1,
  notebook: false,
}

const reducer = (state: any, action: any) => {
  switch (action.type) {
    case 'TOGGLE_COMPONENT':
      return {
        ...state,
        [action.name]: !state[action.name],
      };
    case 'TOGGLE_LIGHTS':
      return {
        ...state,
        main_lights: state.main_lights == 1 ? 0 : 1,
        point_lights: state.point_lights == 1 ? 0 : 1,
        lamps: state.lamps == 1 ? 0 : 1,
      };
    default:
      return state;
  }
}


export function Room(props: JSX.IntrinsicElements['group']) {
  const group = useRef<any>()
  const { nodes, materials, animations } = useGLTF('/room.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)

  const reduxDispatch = useAppDispatch()
  const reduxState = useAppSelector(state => state)
  const controlsState = useAppSelector(state => state.controls)
  const deskState = useAppSelector(state => getState(state))

  //social media button hover states
  const [github, setGithub] = useState(false)
  const [discord, setDiscord] = useState(false)
  const [linkedin, setLinkedin] = useState(false)
  const [instagram, setInstagram] = useState(false)
  const [devpost, setDevpost] = useState(false)

  //control hover cursor style
  useEffect(() => {
    document.body.style.cursor = (github || discord || linkedin || instagram || devpost) ? 'pointer' : 'auto'
  }, [github, discord, linkedin, instagram, devpost])

  const [state, dispatch] = useReducer(reducer, ROOM_STATE);

  const handleReduxClick = (e: THREE.Event) => {
    e.stopPropagation();
    const componentName = e.eventObject.name;//important! to select group name use e.eventObject
    console.log(componentName)
    reduxDispatch(toggleState(componentName));
  };

  const handleClick = (e: THREE.Event) => {
    e.stopPropagation();
    const componentName = e.eventObject.name;//important! to select group name use e.eventObject
    console.log(componentName)
    dispatch({ type: 'TOGGLE_COMPONENT', name: componentName });
  };

  const clickShield = (e: THREE.Event) => {
    e.stopPropagation();
  };

  const handleLights = (e: THREE.Event) => {
    e.stopPropagation();
    reduxDispatch(reduxLights());
  };

  useEffect(() => {
    actions['idle_loop']?.play()
    actions['idle_float.001']?.play()
  }, [actions])

  const {
    closet_drawer_l,
    closet_drawer_r,
    closet_door_l,
    closet_door_r,
    desk_5,
    desk_6,
    chair_legs

  } = useSpring({
    closet_drawer_l: state.closet_drawer_l ? 0 : 0.8,
    closet_drawer_r: state.closet_drawer_r ? 0 : 0.8,
    closet_door_r: state.closet_door_r ? Math.PI / 2.5 : 0,
    closet_door_l: state.closet_door_r ? -Math.PI / 2 : 0,
    desk_1: state.desk_1 ? 0 : -0.73,
    desk_5: state.desk_5 ? 0 : -0.73,
    desk_6: state.desk_6 ? 0 : -0.73,
    chair_legs: deskState.chair ? 1.3 : 0.3,
    config: {
      mass: 1,
      tension: 400,
      friction: 20,
    },
  })

  const {
    notebook,
    desk_3,
    desk_2,
    desk_4,
  } = useSpring({
    notebook: deskState.notebook ? -Math.PI + 0.1 : 0,
    desk_2: state.desk_2 ? 0 : -0.73,
    desk_3: state.desk_3 ? 0 : -0.73,
    desk_4: state.desk_4 ? 0 : -0.73,
    config: {
      mass: 1,
      tension: 200,
      friction: 30,
    },
  })

  const {
    instagram_,
    devpost_,
    github_,
    linkedin_,
    discord_,
  } = useSpring(
    {
      instagram_: instagram ? -0.1 : 0,
      devpost_: devpost ? -0.1 : 0,
      github_: github ? -0.1 : 0,
      linkedin_: linkedin ? -0.1 : 0,
      discord_: discord ? -0.1 : 0,

    }
  )

  //controlling clock animation
  const hourHand = useRef<any>()
  const minuteHand = useRef<any>()

  useFrame(() => {
    if (hourHand.current && minuteHand.current) {
      /*  hourHand.current.rotation.z = new Date().getHours() / 12 * Math.PI * 2
       minuteHand.current.rotation.z = new Date().getMinutes() / 60 * Math.PI * 2 */
      hourHand.current.rotation.x += 0.0001
      minuteHand.current.rotation.x += 0.006
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Window_Group" />
        <group name="Object" />
        <group name="Empty" />
        <group name="Circle" />
        <group name="main_lights_control" position={[2.09, 7.66, 0.03]}>
          <group name="big_point_light" position={[1.98, -1.76, -1.03]} rotation={[1.89, 0.88, -2.05]}>
            <pointLight name="big_point_light_Orientation" intensity={500 * INTENSITY_MULTIPLIER * controlsState.main_lights} decay={2} rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="cieling_key_light" position={[0.02, -3.26, -0.47]} rotation={[2.89, 1.27, -2.97]} scale={39.73} />
          <group name="cieling_light" position={[0.02, -3.21, 2.24]} rotation={[-2.94, 1.33, 3.08]} scale={30.19} />
          <group name="cieling_spot_light" position={[-3.13, -3.21, 2.24]} rotation={[2.82, 1.22, -2.97]}>
            <spotLight name="cieling_spot_light_Orientation" intensity={300 * INTENSITY_MULTIPLIER * controlsState.main_lights} angle={0.65} penumbra={0.15} decay={2} rotation={[-Math.PI / 2, 0, 0]}>
              <group position={[0, 0, -1]} />
            </spotLight>
          </group>
          <group name="closet_spotlight" position={[-5.1, -3.24, -0.46]} rotation={[2.09, 0.94, -2.11]}>
            <spotLight name="closet_spotlight_Orientation" intensity={73 * INTENSITY_MULTIPLIER * controlsState.main_lights} angle={0.65} penumbra={0.15} decay={2} rotation={[-Math.PI / 2, 0, 0]}>
              <group position={[0, 0, -1]} />
            </spotLight>
          </group>
          <group name="Sun" position={[7.48, -5.93, 1.5]} rotation={[-1.69, 0, -1.7]} scale={37.03} />
          <group name="Sun001" position={[-6.92, -4.97, 1.5]} rotation={[1.99, -0.46, 1.17]}>
            <directionalLight name="Sun001_Orientation" intensity={0.99 * INTENSITY_MULTIPLIER * controlsState.main_lights} color="#000144" rotation={[-Math.PI / 2, 0, 0]}>
              <group position={[0, 0, -1]} />
            </directionalLight>
          </group>
          <group name="Sun002" position={[7.48, -3.28, 7.09]} rotation={[-0.04, -0.24, -0.94]}>
            <directionalLight name="Sun002_Orientation" intensity={1.5 * INTENSITY_MULTIPLIER * controlsState.main_lights} color="#ff9582" rotation={[-Math.PI / 2, 0, 0]}>
              <group position={[0, 0, -1]} />
            </directionalLight>
          </group>
          <group name="Sun003" position={[10.53, -5.93, 10.15]} rotation={[-1.68, 0.02, -2.25]} scale={37.03} />
        </group>


        <group name="point_lights_control" position={[0.62, 7.66, 0.03]}>
          <group name="cieling_blue" position={[1.5, -3.21, 2.24]} rotation={[-2.94, 1.33, 3.08]} scale={30.19}>
            <pointLight name="cieling_blue_Orientation" intensity={100 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#6fffc9" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="cieling_orange_light" position={[1.5, -3.21, -0.47]} rotation={[2.89, 1.27, -2.97]} scale={39.73}>
            <pointLight name="cieling_orange_light_Orientation" intensity={135.3 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#ff6023" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="cieling_point_light_orange" position={[-1.63, -3.21, 2.57]} rotation={[2.82, 1.22, -2.97]}>
            <pointLight name="cieling_point_light_orange_Orientation" intensity={50 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#63c4ff" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="closet_light" position={[-3.62, -3.24, -0.46]} rotation={[2.09, 0.94, -2.11]}>
            <pointLight name="closet_light_Orientation" intensity={73 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#ff692d" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="fill_light" position={[2.31, -7.32, 0.42]} rotation={[-2.94, 1.33, 3.08]} scale={30.19}>
            <pointLight name="fill_light_Orientation" intensity={50 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#6fffc9" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="fill_light001" position={[2.31, -7.32, 3.04]} rotation={[-2.94, 1.33, 3.08]} scale={30.19}>
            <pointLight name="fill_light001_Orientation" intensity={50 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#6fffc9" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="fill_light002" position={[-2.34, -7.32, 2.47]} rotation={[-2.94, 1.33, 3.08]} scale={30.19}>
            <pointLight name="fill_light002_Orientation" intensity={50 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#ff5113" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="Light006" position={[2.87, -1.76, -1.03]} rotation={[1.89, 0.88, -2.05]}>
            <pointLight name="Light006_Orientation" intensity={500 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#ff3e01" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="outside_light_blue" position={[4.22, -4.66, 1.7]} rotation={[-1.71, -0.28, -2.09]} scale={37.03}>
            <pointLight name="outside_light_blue_Orientation" intensity={300 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#bcedff" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="outside_light_blue_1" position={[4.22, -4.66, -0.18]} rotation={[-1.71, -0.28, -2.09]} scale={37.03}>
            <pointLight name="outside_light_blue_1_Orientation" intensity={300 * INTENSITY_MULTIPLIER * controlsState.point_lights} decay={2} color="#bcedff" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
        </group>
        <group name="lamp_lights_control" position={[2.73, -1.86, -0.05]}>
          <group name="desk_lamp_point_light" position={[0.1, 4.3, -0.93]}>
            <pointLight name="desk_lamp_point_light_Orientation" intensity={67.9 * INTENSITY_MULTIPLIER * controlsState.lamps} decay={2} color="#ffa568" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="desk_lamp_spotlight" position={[0.08, 4.29, -0.88]} rotation={[-0.57, -0.03, 0.12]}>
            <spotLight name="desk_lamp_spotlight_Orientation" intensity={122.2 * INTENSITY_MULTIPLIER * controlsState.lamps} angle={Math.PI / 8} penumbra={0.15} decay={2} color="#ffdaeb" rotation={[-Math.PI / 2, 0, 0]}>
              <group position={[0, 0, -1]} />
            </spotLight>
          </group>
          <group name="lamp_light_2" position={[-0.8, 3.71, -1.48]} rotation={[1.89, 0.88, -2.05]}>
            <pointLight name="lamp_light_2_Orientation" intensity={110.8 * INTENSITY_MULTIPLIER * controlsState.lamps} decay={2} color="#ff8d3a" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="lamp_light_nightstand" position={[-0.8, 3.55, -1.54]} rotation={[1.89, 0.88, -2.05]}>
            <pointLight name="lamp_light_nightstand_Orientation" intensity={110.8 * INTENSITY_MULTIPLIER * controlsState.lamps} decay={2} color="#ff9f9d" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
        </group>

        <mesh name="shiba" geometry={nodes.shiba.geometry} material={materials.shiba}
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("rug")) }}
        />
        <mesh name="Windows_Sill" geometry={nodes.Windows_Sill.geometry} material={materials.Sill_material} />
        <mesh name="windowframe" geometry={nodes.windowframe.geometry} material={materials['gray.004']} />
        {/* <animated.mesh onClick={(e) => handleClick(e)} scale-z={curtain_r} name="curtain_r" geometry={nodes.curtain_r.geometry} material={materials.hotel_sheet} /> */}
        <mesh name="curtain_top" geometry={nodes.curtain_top.geometry} material={materials.gray} />
        {/*   <animated.mesh onClick={(e) => handleClick(e)} scale-z={curtain_l} name="curtain_l" geometry={nodes.curtain_l.geometry} material={materials.hotel_sheet} /> */}
        <Curtains />
        <mesh name="pillow" geometry={nodes.pillow.geometry} material={materials['gray.001']} />
        <mesh name="mattress" geometry={nodes.mattress.geometry} material={materials.gray} />
        <group name="laptop_screen"
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("laptop")) }}
        >
          <mesh name="Cube107" geometry={nodes.Cube107.geometry} material={materials['gray.004']} />
          <mesh name="Cube107_1" geometry={nodes.Cube107_1.geometry} material={materials.laptop_screen} />
        </group>
        <mesh name="laptop016" geometry={nodes.laptop016.geometry} material={materials.laptop}
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("laptop")) }} />
        <group name="laptop"
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("laptop")) }}
        >
          <mesh name="Cube061" geometry={nodes.Cube061.geometry} material={materials.laptop} />
          <mesh name="Cube061_1" geometry={nodes.Cube061_1.geometry} material={materials['laptop.001']} />
        </group>
        <mesh name="Handle001" geometry={nodes.Handle001.geometry} material={materials.Plastic_Handle_material} />
        <mesh name="Handle" geometry={nodes.Handle.geometry} material={materials.Plastic_Handle_material} />
        <animated.mesh onClick={(e) => handleClick(e)} position-x={desk_5} name="desk_5" geometry={nodes.desk_5.geometry} material={materials['gray.001']}>
          <group name="extracurriculars_drawer_light" position={[2.92, 0.47, 2.2]}>
            <pointLight name="extracurriculars_drawer_light_Orientation" intensity={10 * INTENSITY_MULTIPLIER} decay={2} color="#ff962d" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="cake_pan" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("don")) }}>
            <mesh name="Cylinder008" geometry={nodes.Cylinder008.geometry} material={materials['gray.004']} />
            <mesh name="Cylinder008_1" geometry={nodes.Cylinder008_1.geometry} material={materials.gray} />
            <group name="cake">
              <mesh name="Sphere001" geometry={nodes.Sphere001.geometry} material={materials.yellow} />
              <mesh name="Sphere001_1" geometry={nodes.Sphere001_1.geometry} material={materials['orange.005']} />
            </group>
          </group>
          <mesh name="note008" geometry={nodes.note008.geometry} material={materials.notes} />
          <group name="printer" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("printingclub")) }}>
            <mesh name="Cube018" geometry={nodes.Cube018.geometry} material={materials['RoRe_tex_metallic.001']} />
            <mesh name="Cube018_1" geometry={nodes.Cube018_1.geometry} material={materials.RoRe} />
          </group>
          <mesh name="UTMIST" geometry={nodes.UTMIST.geometry} material={materials.UTMIST}
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("utmist")) }}
          />
          <group name="welcome_desk" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("welcomedesk")) }}>
            <mesh name="Cube038" geometry={nodes.Cube038.geometry} material={materials['gray.005']} />
            <mesh name="Cube038_1" geometry={nodes.Cube038_1.geometry} material={materials['gray.001']} />
            <mesh name="welcome" geometry={nodes.welcome.geometry} material={materials.sans_eye} />
            <mesh name="welcome_keyboard" geometry={nodes.welcome_keyboard.geometry} material={materials['gray.005']} />
            <group name="welcome_kleenex">
              <mesh name="Cube040" geometry={nodes.Cube040.geometry} material={materials.turquoise} />
              <mesh name="Cube040_1" geometry={nodes.Cube040_1.geometry} material={materials.gray} />
            </group>
            <mesh name="welcome_monitor" geometry={nodes.welcome_monitor.geometry} material={materials['gray.005']} />
            <group name="welcome_pad">
              <mesh name="Cube041" geometry={nodes.Cube041.geometry} material={materials['gray.005']} />
              <mesh name="Cube041_1" geometry={nodes.Cube041_1.geometry} material={materials['gray.002']} />
            </group>
            <mesh name="welcome_window" geometry={nodes.welcome_window.geometry} material={nodes.welcome_window.material} />
          </group>
        </animated.mesh>
        <animated.mesh onClick={(e) => handleClick(e)} position-x={desk_6} name="desk_6" geometry={nodes.desk_6.geometry} material={materials['gray.001']}>
          <group name="hobbies_drawer_light" position={[2.92, 0.13, 2.16]}>
            <pointLight name="hobbies_drawer_light_Orientation" intensity={10 * INTENSITY_MULTIPLIER} decay={2} color="#ff962d" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="badminton_racket" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("sports")) }}>
            <mesh name="Plane007" geometry={nodes.Plane007.geometry} material={materials['red.002']} />
            <mesh name="Plane007_1" geometry={nodes.Plane007_1.geometry} material={materials['red.003']} />
            <mesh name="Plane007_2" geometry={nodes.Plane007_2.geometry} material={materials['gray.005']} />
            <mesh name="Plane007_3" geometry={nodes.Plane007_3.geometry} material={materials['gray.001']} />
          </group>
          <group name="birdie" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("sports")) }}>
            <mesh name="Sphere" geometry={nodes.Sphere.geometry} material={materials['gray.001']} />
            <mesh name="Sphere_1" geometry={nodes.Sphere_1.geometry} material={materials['gray.001']} />
            <mesh name="Sphere_2" geometry={nodes.Sphere_2.geometry} material={materials['blue.001']} />
          </group>
          {/* <mesh name="microphone" geometry={nodes.microphone.geometry} material={materials['gray.005']} /> */}
          <mesh name="note009" geometry={nodes.note009.geometry} material={materials.notes} />
          <group name="paddle" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("sports2")) }}>
            <mesh name="Cylinder014" geometry={nodes.Cylinder014.geometry} material={materials['gray.005']} />
            <mesh name="Cylinder014_1" geometry={nodes.Cylinder014_1.geometry} material={materials['red.003']} />
            <mesh name="Cylinder014_2" geometry={nodes.Cylinder014_2.geometry} material={materials.orange} />
          </group>
          <group name="paddle001" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("sports2")) }}>
            <mesh name="Cylinder018" geometry={nodes.Cylinder018.geometry} material={materials['gray.005']} />
            <mesh name="Cylinder018_1" geometry={nodes.Cylinder018_1.geometry} material={materials['red.003']} />
            <mesh name="Cylinder018_2" geometry={nodes.Cylinder018_2.geometry} material={materials.orange} />
          </group>
          <group name="piano" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("piano")), reduxDispatch(toggleControls("pauseMusic")) }}>
            <mesh name="Vert004" geometry={nodes.Vert004.geometry} material={materials['orange.005']} />
            <mesh name="Vert004_1" geometry={nodes.Vert004_1.geometry} material={materials.piano} />
            <mesh name="piano_lid" geometry={nodes.piano_lid.geometry} material={materials['orange.005']} />
          </group>
          <mesh name="ping_pong_ball" geometry={nodes.ping_pong_ball.geometry} material={materials['orange.002']} />
        </animated.mesh>
        <mesh name="doorway" geometry={nodes.doorway.geometry} material={materials.gray} />
        <mesh name="door002" geometry={nodes.door002.geometry} material={materials.mattress} />
        <mesh name="desk009" geometry={nodes.desk009.geometry} material={materials['gray.001']} />
        <mesh name="desk008" geometry={nodes.desk008.geometry} material={materials['gray.001']} />
        <mesh name="desk_1" geometry={nodes.desk_1.geometry} material={materials['gray.001']} />
        <animated.mesh name="desk_2" onClick={(e) => handleClick(e)} position-x={desk_2} geometry={nodes.desk_2.geometry} material={materials['gray.001']}>
          <group name="work_light" position={[2.92, 0.97, -0.31]}>
            <pointLight name="work_light_Orientation" intensity={10 * INTENSITY_MULTIPLIER} decay={2} color="#ff962d" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <mesh name="riseDesk" geometry={nodes.desk_legs.geometry} material={materials['gray.001']} onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("riseDesk")) }}>
            <group name="risedesk" >
              <mesh name="Cube012" geometry={nodes.Cube012.geometry} material={materials['gray.004']} />
              <mesh name="Cube012_1" geometry={nodes.Cube012_1.geometry} material={materials['gray.001']} />
              <mesh name="Cube012_2" geometry={nodes.Cube012_2.geometry} material={materials.desk_screen} />
            </group>
          </mesh>
          <group name="mlh" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("mlh")) }}>
            <mesh name="H" geometry={nodes.H.geometry} material={materials['yellow.002']} />
            <mesh name="L" geometry={nodes.L.geometry} material={materials['blue.001']} />
            <mesh name="M" geometry={nodes.M.geometry} material={materials['red.002']} />
          </group>
          <Cloudbreak />
          <mesh name="note005" geometry={nodes.note005.geometry} material={materials.notes} />
          {/*   <mesh name="ramuri" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("ramuri")) }} geometry={nodes.ramuri.geometry} material={materials.ramuri} /> */}
        </animated.mesh>
        <animated.mesh onClick={(e) => handleClick(e)} position-x={desk_3} name="desk_3" geometry={nodes.desk_3.geometry} material={materials['gray.001']}>
          <group name="diploma" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("education")) }}>
            <mesh name="Cube027" geometry={nodes.Cube027.geometry} material={materials.diploma} />
            <mesh name="Cube027_1" geometry={nodes.Cube027_1.geometry} material={materials['gray.004']} />
          </group>
          <group name="IB" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("education")) }}>
            <mesh name="Cylinder009" geometry={nodes.Cylinder009.geometry} material={materials.IB} />
            <mesh name="Cylinder009_1" geometry={nodes.Cylinder009_1.geometry} material={materials.Bayview} />
          </group>
          <mesh name="note006" geometry={nodes.note006.geometry} material={materials.notes} />
        </animated.mesh>
        <mesh name="desk003" geometry={nodes.desk003.geometry} material={materials.gray} />
        <mesh name="nightstand" geometry={nodes.nightstand.geometry} material={materials.gray} />
        <animated.mesh onClick={(e) => handleClick(e)} position-x={desk_4} name="desk_4" geometry={nodes.desk_4.geometry} material={materials['gray.001']}>
          <group name="blender">
            <mesh name="Vert001" geometry={nodes.Vert001.geometry} material={BLENDER_ORANGE} />
            <mesh name="Vert001_1" geometry={nodes.Vert001_1.geometry} material={BLENDER_BLUE} />
            <mesh name="Vert001_2" geometry={nodes.Vert001_2.geometry} material={materials.gray} />
          </group>
          <group onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("skills")) }}>
            <mesh name="CSS" geometry={nodes.CSS.geometry} material={materials.skills} />
            <mesh name="figma" geometry={nodes.figma.geometry} material={materials.skills} />
            <mesh name="firebase" geometry={nodes.firebase.geometry} material={materials.skills} />
            <mesh name="git" geometry={nodes.git.geometry} material={materials.skills} />
            <mesh name="HTML" geometry={nodes.HTML.geometry} material={materials.skills} />
            <mesh name="JS" geometry={nodes.JS.geometry} material={materials.skills} />
            <mesh name="nextjs" geometry={nodes.nextjs.geometry} material={materials.skills} />

            <mesh name="Redux" geometry={nodes.Redux.geometry} material={materials.skills} />
            <mesh name="Redux002" geometry={nodes.Redux002.geometry} material={materials.react} />
            <mesh name="tailwindcss" geometry={nodes.tailwindcss.geometry} material={materials.skills} />
            <mesh name="TS" geometry={nodes.TS.geometry} material={materials.skills} />
          </group>
          <mesh name="note007" geometry={nodes.note007.geometry} material={materials.notes} />
        </animated.mesh>
        <mesh name="desk" geometry={nodes.desk.geometry} material={materials.gray} onClick={(e) => clickShield(e)} />
        <group name="lotion"
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("lotion")) }}
        >
          <mesh name="Cylinder003" geometry={nodes.Cylinder003.geometry} material={materials.yellow} />
          <mesh name="Cylinder003_1" geometry={nodes.Cylinder003_1.geometry} material={materials['blue.002']} />
        </group>

        <mesh onClick={(e) => handleLights(e)} name="silver_lamp" geometry={nodes.silver_lamp.geometry} material={materials['gray.003']} />
        <mesh name="pen" geometry={nodes.pen.geometry} material={materials['gray.005']}
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("notebook")) }}
        />
        <mesh onClick={(e) => handleLights(e)} name="lampshade" geometry={nodes.lampshade.geometry} material={materials.yellow} />
        <mesh onClick={(e) => handleLights(e)} name="nightstand_lamp" geometry={nodes.nightstand_lamp.geometry} material={nodes.nightstand_lamp.material} />
        <mesh name="wall_l" geometry={nodes.wall_l.geometry} material={materials['gray.001']} />
        <mesh name="wall_r" geometry={nodes.wall_r.geometry} material={materials['gray.001']} />
        <mesh name="floor" geometry={nodes.floor.geometry} material={materials.yellow} />
        <mesh name="closet_body" geometry={nodes.closet_body.geometry} material={materials['gray.001']}>
          <mesh name="closet_rod" geometry={nodes.closet_rod.geometry} material={materials['gray.003']} />
        </mesh>
        <mesh name="book002" geometry={nodes.book002.geometry} material={materials.gray} />
        <group name="book001">
          <mesh name="Cube011" geometry={nodes.Cube011.geometry} material={materials.books} />
          <mesh name="Cube011_1" geometry={nodes.Cube011_1.geometry} material={materials['gray.001']} />
        </group>
        <group name="book"
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("book")) }}
        >
          <mesh name="Cube007" geometry={nodes.Cube007.geometry} material={materials.gray} />
          <mesh name="Cube007_1" geometry={nodes.Cube007_1.geometry} material={materials['turquoise.003']} />
        </group>
        <mesh
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("blanket")) }}
          name="blanket" geometry={nodes.blanket.geometry} material={materials.turquoise} />
        <mesh name="bed_head" geometry={nodes.bed_head.geometry} material={materials['red.005']} />
        <mesh name="bed_frame" geometry={nodes.bed_frame.geometry} material={materials.wood_dark} position={[0, -0.04, 0]} />
        <group name="backpack" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleDesk("bag")) }}>
          <mesh name="Cube110" geometry={nodes.Cube110.geometry} material={materials['gray.003']} />
          <mesh name="Cube110_1" geometry={nodes.Cube110_1.geometry} material={materials['gray.005']} />
          <mesh name="Cube110_2" geometry={nodes.Cube110_2.geometry} material={materials['orange.003']} />
        </group>
        <mesh name="AC" geometry={nodes.AC.geometry} material={materials.AC} />
        <animated.group name="closet_drawer_r" onClick={(e) => handleClick(e)} position-x={closet_drawer_r}>
          <mesh name="Cube009" geometry={nodes.Cube009.geometry} material={materials.gray} />
          <mesh name="Cube009_1" geometry={nodes.Cube009_1.geometry} material={materials['gray.003']} />
          <mesh name="Cube009_2" geometry={nodes.Cube009_2.geometry} material={materials['gray.004']} />
          <group name="covermegpt" position={[-2.8, 0.3, -0.93]} rotation={[0, -0.71, -1.02]} scale={0.16}
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleState("covermegpt")) }}

          >
            <mesh name="Sphere008" geometry={nodes.Sphere008.geometry} material={materials['covermegpt.002']} />
            <mesh name="Sphere008_1" geometry={nodes.Sphere008_1.geometry} material={materials['covermegpt.003']} />
            <mesh name="Sphere008_2" geometry={nodes.Sphere008_2.geometry} material={materials['gray.007']} />
            <mesh name="antenna001" geometry={nodes.antenna001.geometry} material={materials['gray.007']} position={[-0.09, 0, 0.97]} rotation={[0, 0, 1.64]} scale={0.14} />
          </group>
          <group name="lumigui_light001" position={[-2.75, 0.15, -1.02]}>
            <pointLight name="lumigui_light001_Orientation" intensity={10 * INTENSITY_MULTIPLIER} decay={2} color="#ff962d" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <mesh name="note011" geometry={nodes.note011.geometry} material={materials.notes} />
          <mesh name="vocalverse" geometry={nodes.vocalverse.geometry} material={materials.hackathons}
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleState("vocalverse")) }}
          />
        </animated.group>
        <animated.group name="closet_drawer_l" onClick={(e) => handleClick(e)} position-x={closet_drawer_l}>
          <mesh name="Cylinder006" geometry={nodes.Cylinder006.geometry} material={materials['gray.004']} />
          <mesh name="Cylinder006_1" geometry={nodes.Cylinder006_1.geometry} material={materials.gray} />
          <mesh name="Cylinder006_2" geometry={nodes.Cylinder006_2.geometry} material={materials['gray.003']} />
          <group name="lumigui_light" position={[-2.89, -0.17, 0.77]}>
            <pointLight name="lumigui_light_Orientation" intensity={10 * INTENSITY_MULTIPLIER} decay={2} color="#ff962d" rotation={[-Math.PI / 2, 0, 0]} />
          </group>
          <group name="lumigui_root" position={[-2.83, -0.02, 0.42]} rotation={[0, 1.57, 0]} scale={[0.1, 0.1, 0.09]}
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleState("lumigui")) }}
          >
            <mesh name="lumigui" geometry={nodes.lumigui.geometry} material={materials.lumigui} morphTargetDictionary={nodes.lumigui.morphTargetDictionary} morphTargetInfluences={nodes.lumigui.morphTargetInfluences} position={[-3.65, -1.58, 17.72]} />
          </group>
          <mesh name="NEAR" geometry={nodes.NEAR.geometry} material={materials.hackathons}
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleState("near")) }}
          />
          <mesh name="note010" geometry={nodes.note010.geometry} material={materials.notes} />
          <mesh onClick={(e) => handleReduxClick(e)} name="qhacks" geometry={nodes.qhacks.geometry} material={materials['yellow.003']} />
          <mesh name="uottahack" geometry={nodes.uottahack.geometry} material={materials.hackathons}
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleState("tailor")) }}
          />
        </animated.group>
        <mesh name="michael_20" geometry={nodes.michael_20.geometry} material={materials['orange.002']}
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("michael20")) }}
        />
        <mesh name="drawer_case" geometry={nodes.drawer_case.geometry} material={materials['gray.001']} />
        <group name="backpack002">
          <mesh name="Cube080" geometry={nodes.Cube080.geometry} material={materials['gray.003']} />
          <mesh name="Cube080_1" geometry={nodes.Cube080_1.geometry} material={materials['gray.005']} />
          <mesh name="Cube080_2" geometry={nodes.Cube080_2.geometry} material={materials['orange.003']} />
        </group>
        <group name="backpack003">
          <mesh name="Cube081" geometry={nodes.Cube081.geometry} material={materials['gray.003']} />
          <mesh name="Cube081_1" geometry={nodes.Cube081_1.geometry} material={materials['gray.005']} />
          <mesh name="Cube081_2" geometry={nodes.Cube081_2.geometry} material={materials['orange.003']} />
        </group>
        <group name="backpack004">
          <mesh name="Cube082" geometry={nodes.Cube082.geometry} material={materials['gray.003']} />
          <mesh name="Cube082_1" geometry={nodes.Cube082_1.geometry} material={materials['gray.005']} />
          <mesh name="Cube082_2" geometry={nodes.Cube082_2.geometry} material={materials['orange.003']} />
        </group>
        <animated.mesh name="devpost" geometry={nodes.devpost.geometry} material={materials.hackathons} position-z={devpost_}
          onPointerEnter={() => setDevpost(true)}
          onPointerLeave={() => setDevpost(false)}
          onClick={() => window.open("https://devpost.com/michaelyu713705?ref_content=user-portfolio&ref_feature=portfolio&ref_medium=global-nav", "_blank")}
        />
        <animated.mesh name="Discord" geometry={nodes.Discord.geometry} material={DISCORD_MATERIAL} position-z={discord_}
          onPointerEnter={() => setDiscord(true)}
          onPointerLeave={() => setDiscord(false)}
          onClick={() => reduxDispatch(toggleStatePopup("discord"))}
        />
        <animated.mesh name="insta" geometry={nodes.insta.geometry} material={materials.hackathons} position-z={instagram_}
          onPointerEnter={() => setInstagram(true)}
          onPointerLeave={() => setInstagram(false)}
          onClick={() => window.open("https://www.instagram.com/michael713705/", "_blank")}
        />
        <animated.mesh name="linkedin" geometry={nodes.linkedin.geometry} material={materials.hackathons} position-z={linkedin_}
          onPointerEnter={() => setLinkedin(true)}
          onPointerLeave={() => setLinkedin(false)}
          onClick={() => window.open("https://www.linkedin.com/in/nicetomeetyu/", "_blank")}
        />
        <animated.mesh name="github" geometry={nodes.github.geometry} material={materials.hackathons} position-z={github_}
          onPointerEnter={() => setGithub(true)}
          onPointerLeave={() => setGithub(false)}
          onClick={() => window.open("https://github.com/michaelwaves", "_blank")}
        />
        <mesh name="mlh_shirt" geometry={nodes.mlh_shirt.geometry} material={materials.clothes}>
          <mesh name="hangar002" geometry={nodes.hangar002.geometry} material={materials['gray.004']} />
        </mesh>
        <mesh name="arts_shirt" geometry={nodes.arts_shirt.geometry} material={materials.clothes}>
          <mesh name="hangar001" geometry={nodes.hangar001.geometry} material={materials['gray.004']} />
        </mesh>
        <mesh name="dress_shirt" geometry={nodes.dress_shirt.geometry} material={materials.clothes}>
          <mesh name="hangar" geometry={nodes.hangar.geometry} material={materials['gray.004']} />
        </mesh>
        <mesh name="pants" geometry={nodes.pants.geometry} material={materials.clothes}>
          <mesh name="hangar004" geometry={nodes.hangar004.geometry} material={materials['gray.004']} />
        </mesh>
        <mesh name="shorts" geometry={nodes.shorts.geometry} material={materials.clothes}>
          <mesh name="hangar003" geometry={nodes.hangar003.geometry} material={materials['gray.004']} />
        </mesh>
        <group name="slipper" onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("slippers")) }}>
          <mesh name="Cube" geometry={nodes.Cube.geometry} material={materials.orange} />
          <mesh name="Cube_1" geometry={nodes.Cube_1.geometry} material={materials['blue.001']} />
          <group name="slipper002">
            <mesh name="Cube039" geometry={nodes.Cube039.geometry} material={materials.orange} />
            <mesh name="Cube039_1" geometry={nodes.Cube039_1.geometry} material={materials['blue.001']} />
          </group>
        </group>
        <mesh name="trash_can" geometry={nodes.trash_can.geometry} material={materials['gray.003']}>
          <mesh name="trash_bag" geometry={nodes.trash_bag.geometry} material={nodes.trash_bag.material} />
        </mesh>
        <mesh name="notebook" geometry={nodes.notebook_back.geometry} material={materials['turquoise.003']} position={[-0.22, 0, 0.31]}
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("notebook")) }}
        >
          <animated.group name="notebook" position={[3.05, 1.3, 0.7]} rotation={[0, 0, 0]} rotation-x={notebook}
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("notebook")) }}
          >
            <mesh name="Cube078" geometry={nodes.Cube078.geometry} material={materials['turquoise.003']} />
            <mesh name="Cube078_1" geometry={nodes.Cube078_1.geometry} material={materials.gray} />
            <mesh name="Cube078_2" geometry={nodes.Cube078_2.geometry} material={materials.figma} />
          </animated.group>
          <mesh name="notebook_binding" geometry={nodes.notebook_binding.geometry} material={materials['red.005']} position={[0.03, 0, 0]} />
          <group name="notebook_paper" position={[3.08, 1.29, 1]}>
            <mesh name="Cube044" geometry={nodes.Cube044.geometry} material={materials.gray} />
            <mesh name="Cube044_1" geometry={nodes.Cube044_1.geometry} material={materials.figma_2} />
          </group>
        </mesh>
        <animated.mesh
          onClick={() => { reduxDispatch(toggleStatePopup("chair")) }}
          name="chair_legs" geometry={nodes.chair_legs.geometry} material={materials['gray.004']} position={[2.00, -0.03, 0.27]}
          position-z={chair_legs}
        >
          <mesh
            onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("chair")) }}
            name="chair_back" geometry={nodes.chair_back.geometry} material={materials['orange.002']} position={[0, 0.72, -0.41]}>
            <mesh
              onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("chair")) }}
              name="seat" geometry={nodes.seat.geometry} material={materials['orange.003']} position={[0.01, -0.07, 0]} />
          </mesh>
        </animated.mesh>
        <animated.group onClick={(e) => handleClick(e)} rotation-y={closet_door_l} name="closet_door_r" position={[-2.29, 2.85, 1.41]}>
          <mesh name="Cube005" geometry={nodes.Cube005.geometry} material={materials.gray} />
          <mesh name="Cube005_1" geometry={nodes.Cube005_1.geometry} material={materials['gray.003']} />
          <mesh name="Cube005_2" geometry={nodes.Cube005_2.geometry} material={materials['gray.004']} />
        </animated.group>
        <animated.group onClick={(e) => handleClick(e)} rotation-y={closet_door_r} name="closet_door_r" position={[-2.29, 2.83, -1.78]}>
          <mesh name="Cube008" geometry={nodes.Cube008.geometry} material={materials.gray} />
          <mesh name="Cube008_1" geometry={nodes.Cube008_1.geometry} material={materials['gray.003']} />
          <mesh name="Cube008_2" geometry={nodes.Cube008_2.geometry} material={materials['gray.004']} />
        </animated.group>
        <group name="door" position={[-3, 1.73, 3.42]}>
          <mesh name="Cube017" geometry={nodes.Cube017.geometry} material={materials.gray} />
          <mesh name="Cube017_1" geometry={nodes.Cube017_1.geometry} material={materials['gray.003']} />
          <mesh name="Cube017_2" geometry={nodes.Cube017_2.geometry} material={materials['gray.004']} />
        </group>
        <group name="clock" position={[3.29, 1.68, 1.74]}
          onClick={(e) => { e.stopPropagation(), reduxDispatch(toggleStatePopup("clock")) }}
        >
          <mesh name="Plane001" geometry={nodes.Plane001.geometry} material={materials['gray.002']} />
          <mesh name="Plane001_1" geometry={nodes.Plane001_1.geometry} material={materials['gray.004']} />
          <mesh name="Plane001_2" geometry={nodes.Plane001_2.geometry} material={materials['gray.005']} />
          <mesh name="Plane001_3" geometry={nodes.Plane001_3.geometry} material={materials.gold} />
          <mesh name="Plane001_4" geometry={nodes.Plane001_4.geometry} material={materials.gray} />
          <mesh name="clock001" geometry={nodes.clock001.geometry} material={materials.gold} position={[-0.08, -0.23, 0]} ref={hourHand} />
          <mesh name="clock002" geometry={nodes.clock002.geometry} material={materials['gray.002']} position={[-0.08, -0.23, 0]} ref={minuteHand} />
        </group>
      </group>
    </group >
  )
}

useGLTF.preload('/room.glb')
